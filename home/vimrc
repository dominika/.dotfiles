set encoding=utf-8
set nocompatible
filetype off

" whitespaces
"set listchars=trail:â€¢,nbsp:Â¬,tab:â€¹â€¹,precedes:Â«,extends:Â»
"set list

call plug#begin('~/.vim/plugged')

Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'
Plug 'vim-airline/vim-airline'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-fugitive'

Plug 'mileszs/ack.vim'
Plug 'tpope/vim-haml'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'sjl/gundo.vim'
Plug 'hexHighlight.vim'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'git://github.com/Townk/vim-autoclose.git'

" colorschemes
Plug 'dracula/vim'
"Plug 'croaky/vim-colors-github'
"Plug 'john2x/flatui.vim'
"Plug 'nelstrom/vim-mac-classic-theme'
"Plug 'baeuml/summerfruit256.vim'

"Plug 'dominika/vim-todos'
Plug 'kchmck/vim-coffee-script'
"Plug 'thoughtbot/vim-rspec'
"Plug 'jgdavey/tslime.vim'
Plug 'benmills/vimux'
Plug 'ecomba/vim-ruby-refactoring'
Plug 'tmhedberg/matchit'
"Plug 'pgr0ss/vimux-ruby-test'
"Plug 'wfleming/vim-codeclimate'
"Plug 'christoomey/vim-tmux-navigator'
"Plug 'Valloric/YouCompleteMe'
"Plug 'tpope/vim-rails'

"Plug 'greyblake/vim-preview'
"Bundle 'git://github.com/terryma/vim-instant-markdown'
"Bundle 'majutsushi/tagbar'
call plug#end()
filetype indent on
filetype plugin on
syntax on

set background=dark
colorscheme dracula

"vim-bufonly


set rnu                        "line numbers
set nuw=5   "line number columns
set sm                 "show match
set ai                 "auto-indent
set sw=2               "shift width
set ts=2               "tabstop
set et        "expandtab, tabs=spaces
set hls       "hlsearch
set is        "incsearch
"set cul       "cursorline
set ignorecase
set smartcase
set magic
set noerrorbells
set novisualbell
set linebreak
set wrap
set ruler
set nolazyredraw

set hidden


au BufRead,BufNewFile *.hamlc set filetype=haml

set fillchars=diff:â£¿

"set undodir=~/.vim/tmp/undo/
set backupdir=~/.vim/tmp/backup/
set directory=~/.vim/tmp/swap/
set nobackup

"mappings
nnoremap <Leader>d :NERDTreeToggle
let NERDTreeHijackNetrw=1
nnoremap <Leader>g :Gstatus5j
nnoremap <Leader>w :Gwrite
nnoremap <Leader>r :Gread
nnoremap <Leader>u :GundoToggle
let g:gundo_right=1

"let g:reload_on_write = 0
map <Leader>t :TlistToggle
map <Leader>yf :s/false/true/
map <Leader>yt :s/true/false/
" turn off search highlighting
nnoremap :set invhlsearch

"map <Leader>aj :exe 'split '.echo substitute(expand('%'),'coffeescripts','javascripts/compiled',"")
map <Leader>gn ^Wh
set pastetoggle=<F2>

nmap <Leader>m :Rmodel
nmap <Leader>c :Rcontroller
nmap <Leader>v :Rview

nmap <Leader>D :%d
nmap <Leader>Y :%y

nmap <Leader>N ?defw*zz

inoremap jk <Esc>

cnorea w!! w !sudo tee % > /dev/null

"folding?
"matchit.vim?
"mksession
"smartindent?
"spell?
for mapmode in ["n", "x", "o"]
    exe mapmode . "noremap <expr> <Leader>0 LineNumbers()"
endfor

function! LineNumbers()
  if exists('+relativenumber')
    exe "setlocal" &l:rnu ? "nu" :  "rnu"
  else
    setl nu!
  endif
endfunction

"edit vimrc
map <leader>e :tabe! ~/.vimrc
map <leader>ee :tabe! ~/.gvimrc
map <leader>b :tabe! ~/.bashrc
autocmd! bufwritepost .vimrc source ~/.vimrc "reload vimrc
" only if visual
"autocmd! bufwritepost .gvimrc source ~/.gvimrc "reload vimrc

set completeopt=menuone,preview,longest

"set viminfo+=!
set viminfo='100,<50,s10,h,:0,n~/.vim/.viminfo
set wildmenu
set wildmode=list:full
set wildignore+=.git
set wildignore+=*.sw?
set wildignore+=DS_STORE

au FocusLost * :silent! wall
au VimResized * :wincmd =

set noshowmode

function! CompleteAckExtensions(A,L,P)
  return ["ruby","coffee","haml","yml"]
endfunction
set laststatus=2

"set t_Co=256
let g:airline_powerline_fonts=1
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'Vl',
    \ '^V' : 'Vb',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '^S' : 'S',
    \ }

" todos
nnoremap <leader>p :call GetTodo()
function! GetTodo()
  exec "tabnew ~/aktualne/".fnamemodify(getcwd(),':t').".todo"
endfunction

nnoremap <Leader>h :s/:\([^ ]*\)\(\s*\)=>/\1:/g

"nnoremap <D-k> gt
"nnoremap <D-j> gT
nnoremap k :tabprevious
nnoremap j :tabnext
nnoremap Q :q
nnoremap <Leader>E :ExTToggle
let ruby_space_errors=1
let g:tex_flavor='latex'
nnoremap ; :

nnoremap <Leader>s :w

"nnoremap <Leader>o :ZoomWin
let g:ycm_collect_identifiers_from_tags_files=0
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%101v.\+/
autocmd FileType man match NONE

if exists("$MANPAGER")
  let $MANPAGER = ""
endif
if exists("$PAGER")
  let $PAGER = ""
endif
if $VIM_CRONTAB == "true"
  set nobackup
  set nowritebackup
endif

"let g:rspec_command = 'call Send_to_Tmux("RAILS_ENV=test bundle exec rspec -f d {spec}\n")'
let g:vimux_ruby_cmd_unit_test = "RAILS_ENV=test bundle exec ruby"
map <Leader>t :RunRubyFocusedContext
"map <Leader>t :call RunCurrentSpecFile()
"map <Leader>s :call RunNearestSpec()<CR>
"map <Leader>l :call RunLastSpec()<CR>
"map <Leader>a :call RunAllSpecs()<CR>
"map gb :Gblame<CR>

autocmd BufReadPost fugitive://* set bufhidden=delete
highlight DiffAdd    cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
"highlight DiffDelete cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
"highlight DiffChange cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
"highlight DiffText   cterm=bold ctermfg=10 ctermbg=88 gui=none guifg=bg guibg=Red
nnoremap <Leader>A :Ag 
nnoremap  :Files
let g:ackprg = 'ag --vimgrep'
"map <C-j> <C-W>j
"map <C-k> <C-W>k
"map <C-h> <C-W>h
"map <C-l> <C-W>l
