set encoding=utf-8
set nocompatible
filetype off
set shell=/usr/local/bin/fish\ -li

" whitespaces
"set listchars=trail:â€¢,nbsp:Â¬,tab:â€¹â€¹,precedes:Â«,extends:Â»
"set list

call plug#begin('~/.vim/plugged')

Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'chaoren/vim-wordmotion'
"let g:wordmotion_prefix = ','

Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'sjl/gundo.vim'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'git://github.com/Townk/vim-autoclose.git'
"Plug 'vim-syntastic/syntastic'
"let g:ale_completion_enabled = 1
Plug 'dense-analysis/ale'
Plug 'mhinz/vim-signify'
Plug 'aklt/plantuml-syntax'

" colorschemes
Plug 'dracula/vim'
Plug 'NLKNguyen/papercolor-theme'

Plug 'kchmck/vim-coffee-script'
Plug 'benmills/vimux'
Plug 'jgdavey/vim-turbux'

" ruby-related
Plug 'vim-ruby/vim-ruby'
Plug 'danchoi/ri.vim'
Plug 'hallison/vim-rdoc'
Plug 'ecomba/vim-ruby-refactoring'
Plug 'tmhedberg/matchit'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tpope/vim-rails'

" python-related
"Plug 'KangOl/vim-pudb'

"Plug 'greyblake/vim-preview'
"Plug 'godlygeek/tabular'
Plug 'ajorgensen/vim-markdown-toc', {'for': 'markdown'}
Plug 'rhysd/vim-gfm-syntax', {'for': 'markdown'}
Plug 'Scuilion/markdown-drawer', {'for': 'markdown'}
let g:gfm_syntax_emoji_conceal=1
autocmd BufRead,BufNewFile *.md setlocal spell
"Plug 'suan/vim-instant-markdown', {'for': 'markdown'}
"Plug 'JamshedVesuna/vim-markdown-preview'
"Plug 'shime/vim-livedown'
Plug 'lmeijvogel/vim-yaml-helper'
Plug 'Yggdroot/indentLine'


"Plug 'majutsushi/tagbar'
call plug#end()
filetype indent on
filetype plugin on
syntax on

set background=dark
colorscheme dracula

"vim-bufonly
set rnu                        "line numbers
set nuw=5   "line number columns
set sm                 "show match
set ai                 "auto-indent
set sw=2               "shift width
set ts=2               "tabstop
set et        "expandtab, tabs=spaces
set hls       "hlsearch
set is        "incsearch
set cul       "cursorline
set ignorecase
set smartcase
set magic
set noerrorbells
set novisualbell
set linebreak
set wrap
set ruler
set nolazyredraw

set hidden


au BufRead,BufNewFile *.hamlc set filetype=haml

set fillchars=diff:â£¿

"set undodir=~/.vim/tmp/undo/
set backupdir=~/.vim/tmp/backup/
set directory=~/.vim/tmp/swap/
set nobackup

"mappings
nnoremap <Leader>d :NERDTreeToggle
let NERDTreeHijackNetrw=1
nnoremap <Leader>g :Gstatus5j
nnoremap <Leader>w :Gwrite
nnoremap <Leader>r :Gread
"nnoremap <Leader>u :GundoToggle
let g:gundo_right=1

"let g:reload_on_write = 0
map <Leader>t :TlistToggle
map <Leader>yf :s/false/true/
map <Leader>yt :s/true/false/
" turn off search highlighting
nnoremap :set invhlsearch

map <Leader>gn ^Wh
set pastetoggle=<F2>
nmap <F4> :set clipboard=unnamed

nmap <Leader>m :Rmodel
nmap <Leader>c :Rcontroller
nmap <Leader>v :Rview

nmap <Leader>D :%d
nmap <Leader>Y :%y

nmap <Leader>N ?defw*zz

inoremap jk <Esc>

cnorea w!! w !sudo tee % > /dev/null

"folding?
"mksession
"smartindent?
"spell?

"edit vimrc
map <leader>e :tabe! ~/.vimrc
map <leader>b :tabe! ~/.bashrc
map <leader>t :tabe! ~/.tmux.conf
autocmd! bufwritepost .vimrc source ~/.vimrc "reload vimrc
" only if visual
"autocmd! bufwritepost .gvimrc source ~/.gvimrc "reload vimrc

set completeopt=menuone,preview,longest

"set viminfo+=!
set viminfo='100,<50,s10,h,:0,n~/.vim/.viminfo
set wildmenu
set wildmode=list:full
set wildignore+=.git
set wildignore+=*.sw?
set wildignore+=DS_STORE

au FocusLost * :silent! wall
au VimResized * :wincmd =

set noshowmode

set laststatus=2

"set t_Co=256
let g:airline_powerline_fonts=1
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'Vl',
    \ '^V' : 'Vb',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '^S' : 'S',
    \ }

nnoremap <Leader>h :s/:\([^ ]*\)\(\s*\)=>/\1:/g

"nnoremap <D-k> gt
"nnoremap <D-j> gT
nnoremap k :tabprevious
nnoremap j :tabnext
nnoremap Q :q!
let ruby_space_errors=1
let g:tex_flavor='latex'
nnoremap Â§ ;
nnoremap ; :

nnoremap <Leader>s :w

"nnoremap <Leader>o :ZoomWin
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

autocmd FileType man match NONE

if exists("$MANPAGER")
  let $MANPAGER = ""
endif
if exists("$PAGER")
  let $PAGER = ""
endif
if $VIM_CRONTAB == "true"
  set nobackup
  set nowritebackup
endif

autocmd BufReadPost fugitive://* set bufhidden=delete
highlight DiffAdd    cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
"highlight DiffDelete cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
"highlight DiffChange cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
"highlight DiffText   cterm=bold ctermfg=10 ctermbg=88 gui=none guifg=bg guibg=Red
nnoremap <Leader>A :Ag 
nnoremap  :GFiles
nnoremap  :Buffers
"map <C-j> <C-W>j
"map <C-k> <C-W>k
"map <C-h> <C-W>h
"map <C-l> <C-W>l
"
set tags=tags,gem_tags
if getcwd()=~$DEP_PROJECT_REG
  set tags=tags,$DEP_PROJECT/tags,gem_tags
endif
let g:tmux_navigator_disable_when_zoomed = 1
let g:CoffeeAutoTagIncludeVars=1
nnoremap g] :call fzf#vim#tags(expand('<cword>'))
nnoremap ,d obinding<ESC>
nnoremap ,b obyebug<ESC>
let g:indentLine_setColors = 1
" run rpspec on line
map <Leader>rl :call VimuxRunCommand("clear; env RAILS_ENV=test bundle exec rspec " . bufname("%") . ":" . line('.'))
" run rpspec on buffer
map <Leader>rb :call VimuxRunCommand("clear; env RAILS_ENV=test bundle exec rspec " . bufname("%"))
" run rpspec on whole suite
map <Leader>rs :call VimuxRunCommand("clear; env RAILS_ENV=test bundle exec rspec")
map <Leader>rr :call VimuxRunCommand("clear; python3 contemplate_koans.py")
"map <Leader>rc :call VimuxRunCommand("clear; check_current")
map <Leader>rc :call VimuxRunCommand("clear; rubocop -R " . bufname("%"))
map <Leader>u :call VimuxRunCommand("clear; plantuml -progress -failfast " . bufname("%") . " && open " . expand("%:p:r") . ".png")

set re=1 " for slow ruby syntax files

let g:syntastic_ruby_checkers = ["mri", "rubocop"]
let g:syntastic_check_on_wq = 0
let g:syntastic_check_on_open = 0

let g:airline_theme='powerlineish'

let g:signify_vcs_list = ['git']
 " highlight lines in Sy and vimdiff etc.)
highlight DiffAdd           cterm=bold ctermbg=none ctermfg=119
highlight DiffDelete        cterm=bold ctermbg=none ctermfg=167
highlight DiffChange        cterm=bold ctermbg=none ctermfg=227

" highlight signs in Sy
highlight SignifySignAdd    cterm=bold ctermbg=237  ctermfg=119
highlight SignifySignDelete cterm=bold ctermbg=237  ctermfg=167
highlight SignifySignChange cterm=bold ctermbg=237  ctermfg=227

autocmd VimEnter * command! -bang -nargs=* Ag
  \ call fzf#vim#ag(<q-args>, '--smart-case --nogroup --ignore=log --ignore=public --ignore=tmp', <bang>0)

autocmd Filetype gitcommit setlocal spell textwidth=72

"nmap <silent> <C-m> <Plug>(ale_previous)
"nmap <silent> <C-n> <Plug>(ale_next)
